<?php


namespace Trud\TgBot;

use WeStacks\TeleBot\TeleBot;
use WeStacks\TeleBot\Objects\Keyboard;
use Trud\TgBot\BotUser;
use Trud\TgBot\BotLoger;

// use WeStacks\TeleBot\Handlers\CommandHandler;

require_once $_SERVER['DOCUMENT_ROOT'] . '/local/lib/Trud/tgBot/botConfig.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/local/vendor/autoload.php';

session_start();

class Bot
{
    private $TOKEN;
	private $BOT_NAME;
	private $inited = false;
	private $bot;
    private $userStates = [];
    
	function __construct() {
		global $botConfig;

		$this->TOKEN 	= $botConfig['token'];
		$this->BOT_NAME = $botConfig['botName'];
		$this->init();
	}
	
    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	private function init() {
		$tBot = new TeleBot([
			'token'      => $this->TOKEN,
			'name'       => $this->BOT_NAME,
			'api_url'    => 'https://api.telegram.org/bot{TOKEN}/{METHOD}',
			'exceptions' => true,
			'async'      => false,
			'handlers'   => []
		]);
        
		$user = $tBot->getMe();
		if($user AND $user->id) {
			$this->inited = true;
			$this->bot = $tBot;
		}
	}


    // ============================================================
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	public function processUpdate($update) {

        // /* ---–¥–µ–±—É–≥--- */
        // ob_start(); // –ù–∞—á–∞—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
        // var_dump($update);
        // $res = ob_get_clean(); 
        // $this->sendMessage($update['message']['chat']['id'], $res);
        // /* ---–¥–µ–±—É–≥--- */

        // —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–Ω–æ–ø–∫–∏)
        if (isset($update['message']['text'])) {  
            $tgId      = $update['message']['from']['id']; 
            $botUser   = new BotUser($tgId);     
            $inMessage = $update['message'];
            if ($inMessage['text'] === '/start') { // TODO: —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
                $this->handleStartCommand($botUser, $inMessage);
            } else if ($inMessage['text'] === '/demo') { // <------------- DEMO
                $this->startDemo($botUser, $inMessage);
            } else {
                $this->handleMessage($botUser, $inMessage);
            }
        }

        // –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ (inline callback)
        if (isset($update['callback_query'])) {
            $tgId      = $update['callback_query']['from']['id'];
            $botUser   = new BotUser($tgId);
            $this->handleInline($botUser, $update);
        }

        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if (isset($update['message']['contact'])) { 
            $tgId        = $update['message']['from']['id']; 
            $botUser     = new BotUser($tgId);
            $update['message']['text'] = $update['message']['contact']['phone_number']; // –∞ –¥–∞–ª—å—à–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->handleMessage($botUser, $update['message']); 
        }   

    }

    // ============================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ==============================
    // —Å—Ç–∞—Ä—Ç
    protected function handleStartCommand($botUser, $inMessage) {
        $messageId = $inMessage['message_id']; // id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
        $chatId    = $inMessage['chat']['id'];
        $tgId      = $inMessage['from']['id'];
        $name = $botUser->getUserData()['NAME'];
        // –µ—Å–ª–∏ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if (!$botUser->isRegistered()) {
            BotLoger::addUserStatus($tgId, 'awaiting_phone');
            
            $welcomeMessage = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá"; // <---------- TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç—ã –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ, –±—Ä–∞—Ç—å –æ—Ç—Ç—É–¥–∞
            $keyboard = [
                'keyboard' => [[['text' => 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç','request_contact' => true]]],
                'resize_keyboard' => true,
                'one_time_keyboard' => true
            ];
        } else {
            $welcomeMessage = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, $name. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è";
        }
        $this->sendMessage($chatId, $welcomeMessage, $keyboard);
    }

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ, –Ω–µ –∫–Ω–æ–ø–æ–∫)
    protected function handleMessage($botUser, $inMessage) {
        $messageId   = $inMessage['message_id']; // id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
        $chatId      = $inMessage['chat']['id'];
        $tgId        = $inMessage['from']['id'];
        $messageText = $inMessage['text'];
        
        // –µ—Å–ª–∏ –∂–¥–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if(BotLoger::getUserStatus($tgId) == 'awaiting_phone') {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if ($botUser->registerUser($messageText)) {
                $name = $botUser->getUserData()['NAME'];
                $response = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, $name! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ $messageText. –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è"; // <---------- TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ, –±—Ä–∞—Ç—å –æ—Ç—Ç—É–¥–∞
                // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ª–æ–≥ —á–∞—Ç–∞
            } else {
                $response = "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ $messageText. –ü–æ—Ö–æ–∂–µ, –≤–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"; // <---------- TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ, –±—Ä–∞—Ç—å –æ—Ç—Ç—É–¥–∞
            }
            BotLoger::addUserStatus($tgId, 'default');
            $this->sendMessage($chatId, $response, ['remove_keyboard' => true]);
        } else {
            // –ª–æ–≥–∏–∫–∞: —É–¥–∞–ª—è—Ç—å –ª–∏—à–Ω–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($chatId, $messageId);
            // $this->sendMessage($chatId, "messageId = <i>$messageId</i> "."<b>–í—ã —Å–∫–∞–∑–∞–ª–∏:</b> " . $messageText); // –¥–µ–±—É–≥
        }
    }

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ (inline)
    protected function handleInline($botUser, $update) {
        $chatId     = $update['callback_query']['message']['chat']['id'];
        $pressed    = $update['callback_query']['data'];
        $messageId  = $update['callback_query']['message']['message_id'];
        $tgId       = $update['callback_query']['from']['id'];

        $response = "messageId = <i>$messageId</i> "."<b>–í—ã –Ω–∞–∂–∞–ª–∏:</b> " . $pressed;
        $keyboard = null;

/* ==========================================  ============================================= */
        //TODO: —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å —Å –Ω–∞–∂–∞—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏: —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É –∏ —Ç.–¥.
        //TODO: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        //TODO: id —Å–æ–æ–±—â–µ–Ω–∏—è - –≤ —Å—Ç–∞—Ç—É—Å - —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –∑–∞–≥–∞—Å–∏—Ç—å, –∫–æ–≥–¥–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ –±—É–¥–µ—Ç
        switch ($pressed) {
            case 'yes_i_go': // <---------- DEMO
                $tomorrow       = date('d.m.Y', strtotime('+1 day'));
                $response = "–ñ–¥–µ–º –≤–∞—Å –≤ –ì—É—Ä–º–∞–Ω–µ 
                $tomorrow –≤ 8:00";
                $keyboard = [ 'inline_keyboard' => [[
                    ['text' => 'üë£ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', 'callback_data' => 'address'],
                    ['text' => 'üë• –ö—Ç–æ –∏–¥–µ—Ç', 'callback_data' => 'other_collegues'],
                ]]];
                break;
            case 'address': // <---------- DEMO
                $response = "<b>–ê–¥—Ä–µ—Å:</b> —É–ª. –°—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è, 62/1
<b>–ê–≤—Ç–æ–±—É—Å—ã:</b> 145, 8
<b>–ú–∞—Ä—à—Ä—É—Ç–∫–∏:</b> 1145, 1298
–ü—Ä–æ—Ö–æ–¥–Ω–∞—è —Å–ª–µ–≤–∞ –æ—Ç –∑–¥–∞–Ω–∏—è";
                $keyboard = [ 'inline_keyboard' => [[
                    ['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'yes_i_go'],
                ]]];
                break;
            case 'other_collegues': // <---------- DEMO
                $response = "–ü–µ—Ç—Ä–æ–≤
–ò–≤–∞–Ω–æ–≤
–°–∏–¥–æ—Ä–æ–≤
–ö—É–∑–Ω–µ—Ü–æ–≤";
                $keyboard = [ 'inline_keyboard' => [[
                    ['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'yes_i_go'],
                ]]];
                break;
            case 'cancel': // <---------- DEMO
                $response = "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω. –ñ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ";
                break;
        }

        $this->editMessage($chatId, $messageId, $response, $keyboard);
    }

    // ============================== –¢–µ—Å—Ç-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ==============================
    public function startDemo($botUser, $inMessage) {
        $name = $botUser->getUserData()['NAME'];
        $messageId   = $inMessage['message_id']; // id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
        $chatId      = $inMessage['chat']['id'];
        $tgId        = $inMessage['from']['id'];
        
        $tomorrow       = date('d.m.Y', strtotime('+1 day'));
        $response = "$name, –≤—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—É
        $tomorrow 8:00, –ì—É—Ä–º–∞–Ω
        <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∏–¥–µ—Ç–µ</b>";
        // $response = "$name, <b>–≤—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—É.</b><br>. $tomorrow";
        // $response       = $name . ', <b>–≤—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—É.</b><br>' . $tomorrow . ' 8:00 <br>' . '–ì—É—Ä–º–∞–Ω' . '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∏–¥–µ—Ç–µ</b>';
        $inlineKeyboard = [ 'inline_keyboard' => [[
            ['text' => '‚úÖ –∏–¥—É', 'callback_data' => 'yes_i_go'],
            ['text' => '‚ùå –Ω–µ—Ç', 'callback_data' => 'cancel'],
        ]]];
        $this->sendMessage($chatId, $response, $inlineKeyboard);
        // $this->sendMessage($chatId, $response);

    }


    // ============================== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ==============================
    public function sendMessage($chatId, $text, $keyboard = null) {

        // TODO: —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª (–∏–ª–∏ –≤ —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π)

    
        $removeKeyboard = ['remove_keyboard' => true];
        // $keyboard = $inlineKeyboard; 

        $params = [
            'chat_id'      => $chatId,
            'text'         => $text,
            'parse_mode'   => 'HTML'
        ];
        if ($keyboard) $params['reply_markup'] = $keyboard;
        $this->bot->sendMessage($params);
    }

    // –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–Ω–æ–ø–æ–∫)
    public function editMessage($chatId, $messageId, $newText, $keyboard = null) {
        $params = [
            'chat_id'      => $chatId,
            'message_id'   => $messageId,
            'text'         => $newText,
            'parse_mode'   => 'HTML'
        ];
        if ($keyboard) $params['reply_markup'] = $keyboard;
        $this->bot->editMessageText($params);
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    public function deleteMessage($chatId, $messageId) {
            $response = $this->bot->deleteMessage([
                'chat_id' => $chatId,
                'message_id' => $messageId
            ]);
            return $response;
    }

}

